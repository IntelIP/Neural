# API Documentation

## Docs

- [Create API Key](https://docs.kalshi.com/api-reference/api-keys/create-api-key.md):  Endpoint for creating a new API key with a user-provided public key.  This endpoint allows users with Premier or Market Maker API usage levels to create API keys by providing their own RSA public key. The platform will use this public key to verify signatures on API requests.
- [Delete API Key](https://docs.kalshi.com/api-reference/api-keys/delete-api-key.md):  Endpoint for deleting an existing API key.  This endpoint permanently deletes an API key. Once deleted, the key can no longer be used for authentication. This action cannot be undone.
- [Generate API Key](https://docs.kalshi.com/api-reference/api-keys/generate-api-key.md):  Endpoint for generating a new API key with an automatically created key pair.  This endpoint generates both a public and private RSA key pair. The public key is stored on the platform, while the private key is returned to the user and must be stored securely. The private key cannot be retrieved again.
- [Get API Keys](https://docs.kalshi.com/api-reference/api-keys/get-api-keys.md):  Endpoint for retrieving all API keys associated with the authenticated user.  API keys allow programmatic access to the platform without requiring username/password authentication. Each key has a unique identifier and name.
- [Create Market In Multivariate Event Collection](https://docs.kalshi.com/api-reference/collection/create-market-in-multivariate-event-collection.md):  Endpoint for looking up an individual market in a multivariate event collection. This endpoint must be hit at least once before trading or looking up a market.
- [Get Multivariate Event Collection](https://docs.kalshi.com/api-reference/collection/get-multivariate-event-collection.md):  Endpoint for getting data about a multivariate event collection by its ticker.
- [Get Multivariate Event Collection Lookup History](https://docs.kalshi.com/api-reference/collection/get-multivariate-event-collection-lookup-history.md):  Endpoint for retrieving which markets in an event collection were recently looked up.
- [Get Multivariate Event Collections](https://docs.kalshi.com/api-reference/collection/get-multivariate-event-collections.md):  Endpoint for getting data about multivariate event collections.
- [Lookup Tickers For Market In Multivariate Event Collection](https://docs.kalshi.com/api-reference/collection/lookup-tickers-for-market-in-multivariate-event-collection.md):  Endpoint for looking up an individual market in a multivariate event collection. If CreateMarketInMultivariateEventCollection has never been hit with that variable combination before, this will return a 404.
- [Accept Quote](https://docs.kalshi.com/api-reference/communications/accept-quote.md):  Endpoint for accepting a quote. This will require the quoter to confirm
- [Confirm Quote](https://docs.kalshi.com/api-reference/communications/confirm-quote.md):  Endpoint for confirming a quote. This will start a timer for order execution
- [Create Quote](https://docs.kalshi.com/api-reference/communications/create-quote.md):  Endpoint for creating a quote in response to an RFQ
- [Create RFQ](https://docs.kalshi.com/api-reference/communications/create-rfq.md):  Endpoint for creating a new RFQ
- [Delete Quote](https://docs.kalshi.com/api-reference/communications/delete-quote.md):  Endpoint for deleting a quote, which means it can no longer be accepted.
- [Delete RFQ](https://docs.kalshi.com/api-reference/communications/delete-rfq.md):  Endpoint for deleting an RFQ by ID
- [Get Communications ID](https://docs.kalshi.com/api-reference/communications/get-communications-id.md):  Endpoint for getting the communications ID of the logged-in user.
- [Get Quote](https://docs.kalshi.com/api-reference/communications/get-quote.md):  Endpoint for getting a particular quote
- [Get Quotes](https://docs.kalshi.com/api-reference/communications/get-quotes.md):  Endpoint for getting quotes
- [Get RFQ](https://docs.kalshi.com/api-reference/communications/get-rfq.md):  Endpoint for getting a single RFQ by id
- [Get RFQs](https://docs.kalshi.com/api-reference/communications/get-rfqs.md):  Endpoint for getting RFQs
- [Get Exchange Announcements](https://docs.kalshi.com/api-reference/get-exchange-announcements.md):  Endpoint for getting all exchange-wide announcements.
- [Get Exchange Schedule](https://docs.kalshi.com/api-reference/get-exchange-schedule.md):  Endpoint for getting the exchange schedule.
- [Get Exchange Status](https://docs.kalshi.com/api-reference/get-exchange-status.md):  Endpoint for getting the exchange status.
- [Get User Data Timestamp](https://docs.kalshi.com/api-reference/get-user-data-timestamp.md):  There is typically a short delay before exchange events are reflected in the API endpoints. Whenever possible, combine API responses to PUT/POST/DELETE requests with websocket data to obtain the most accurate view of the exchange state. This endpoint provides an approximate indication of when the data from the following endpoints was last validated: GetBalance, GetOrder(s), GetFills, GetPositions
- [Get Event](https://docs.kalshi.com/api-reference/market/get-event.md):  Endpoint for getting data about an event by its ticker.  An event represents a real-world occurrence that can be traded on, such as an election, sports game, or economic indicator release. Events contain one or more markets where users can place trades on different outcomes.
- [Get Event Metadata](https://docs.kalshi.com/api-reference/market/get-event-metadata.md):  Endpoint for getting metadata about an event by its ticker.  Returns only the metadata information for an event.
- [Get Events](https://docs.kalshi.com/api-reference/market/get-events.md):  Endpoint for getting data about all events.  An event represents a real-world occurrence that can be traded on, such as an election, sports game, or economic indicator release. Events contain one or more markets where users can place trades on different outcomes.  This endpoint returns a paginated response. Use the 'limit' parameter to control page size (1-200, defaults to 100). The response includes a 'cursor' field - pass this value in the 'cursor' parameter of your next request to get the next page. An empty cursor indicates no more pages are available.
- [Get Market](https://docs.kalshi.com/api-reference/market/get-market.md):  Endpoint for getting data about a specific market by its ticker. A market represents a specific binary outcome within an event that users can trade on (e.g., "Will candidate X win?"). Markets have yes/no positions, current prices, volume, and settlement rules.
- [Get Market Candlesticks](https://docs.kalshi.com/api-reference/market/get-market-candlesticks.md):  Endpoint for getting historical candlestick data for a specific market.  Candlesticks provide OHLC (Open, High, Low, Close) price data aggregated over specific time intervals. Each candlestick represents the price movement during that period, including opening and closing prices, as well as the highest and lowest prices reached.  The period_interval determines the time length of each candlestick and must be one of: 1 (1 minute), 60 (1 hour), or 1440 (1 day). The start_ts and end_ts parameters define the time range for the data.
- [Get Market Order Book](https://docs.kalshi.com/api-reference/market/get-market-order-book.md):  Endpoint for getting the current order book for a specific market.  The order book shows all active bid orders for both yes and no sides of a binary market. It returns yes bids and no bids only (no asks are returned). This is because in binary markets, a bid for yes at price X is equivalent to an ask for no at price (100-X). For example, a yes bid at 7¢ is the same as a no ask at 93¢, with identical contract sizes.  Each side shows price levels with their corresponding quantities and order counts, organized from best to worst prices.
- [Get Markets](https://docs.kalshi.com/api-reference/market/get-markets.md):  Endpoint for listing and discovering markets on Kalshi. A market represents a specific binary outcome within an event that users can trade on (e.g., "Will candidate X win?"). Markets have yes/no positions, current prices, volume, and settlement rules. This endpoint returns a paginated response. Use the 'limit' parameter to control page size (1-1000, defaults to 100). The response includes a 'cursor' field - pass this value in the 'cursor' parameter of your next request to get the next page. An empty cursor indicates no more pages are available.
- [Get Series](https://docs.kalshi.com/api-reference/market/get-series.md):  Endpoint for getting data about a specific series by its ticker.  A series represents a template for recurring events that follow the same format and rules (e.g., "Monthly Jobs Report", "Weekly Initial Jobless Claims", "Daily Weather in NYC"). Series define the structure, settlement sources, and metadata that will be applied to each recurring event instance within that series.
- [Get Series List](https://docs.kalshi.com/api-reference/market/get-series-list.md):  Endpoint for getting data about multiple series with specified filters.  A series represents a template for recurring events that follow the same format and rules (e.g., "Monthly Jobs Report", "Weekly Initial Jobless Claims", "Daily Weather in NYC"). This endpoint allows you to browse and discover available series templates by category.
- [Get Trades](https://docs.kalshi.com/api-reference/market/get-trades.md):  Endpoint for getting all trades for all markets.  A trade represents a completed transaction between two users on a specific market. Each trade includes the market ticker, price, quantity, and timestamp information.  This endpoint returns a paginated response. Use the 'limit' parameter to control page size (1-1000, defaults to 100). The response includes a 'cursor' field - pass this value in the 'cursor' parameter of your next request to get the next page. An empty cursor indicates no more pages are available.
- [Get Milestone](https://docs.kalshi.com/api-reference/milestone/get-milestone.md):  Endpoint for getting data about a specific milestone by its ID.
- [Get Milestones](https://docs.kalshi.com/api-reference/milestone/get-milestones.md):  Endpoint for getting data about milestones with optional filtering.
- [Amend Order](https://docs.kalshi.com/api-reference/portfolio/amend-order.md):  Endpoint for amending the max number of fillable contracts and/or price in an existing order. Max fillable contracts is `remaining_count` + `fill_count`.
- [Batch Cancel Orders](https://docs.kalshi.com/api-reference/portfolio/batch-cancel-orders.md):  Endpoint for cancelling up to 20 orders at once. Available to members with advanced access only.
- [Batch Create Orders](https://docs.kalshi.com/api-reference/portfolio/batch-create-orders.md):  Endpoint for submitting a batch of orders. Each order in the batch is counted against the total rate limit for order operations. Consequently, the size of the batch is capped by the current per-second rate-limit configuration applicable to the user. At the moment of writing, the limit is 20 orders per batch. Available to members with advanced access only.
- [Cancel Order](https://docs.kalshi.com/api-reference/portfolio/cancel-order.md):  Endpoint for canceling orders. The value for the orderId should match the id field of the order you want to decrease. Commonly, DELETE-type endpoints return 204 status with no body content on success. But we can't completely delete the order, as it may be partially filled already. Instead, the DeleteOrder endpoint reduce the order completely, essentially zeroing the remaining resting contracts on it. The zeroed order is returned on the response payload as a form of validation for the client.
- [Create Order](https://docs.kalshi.com/api-reference/portfolio/create-order.md):  Endpoint for submitting orders in a market.
- [Create Order Group](https://docs.kalshi.com/api-reference/portfolio/create-order-group.md):  Creates a new order group with a contracts limit. When the limit is hit, all orders in the group are cancelled and no new orders can be placed until reset.
- [Decrease Order](https://docs.kalshi.com/api-reference/portfolio/decrease-order.md):  Endpoint for decreasing the number of contracts in an existing order. This is the only kind of edit available on order quantity. Cancelling an order is equivalent to decreasing an order amount to zero.
- [Delete Order Group](https://docs.kalshi.com/api-reference/portfolio/delete-order-group.md):  Deletes an order group and cancels all orders within it. This permanently removes the group.
- [Get Balance](https://docs.kalshi.com/api-reference/portfolio/get-balance.md):  Endpoint for getting the balance of a member. The balance value is returned in cents.
- [Get Fills](https://docs.kalshi.com/api-reference/portfolio/get-fills.md):  Endpoint for getting all fills for the member. A fill is when a trade you have is matched.
- [Get Order](https://docs.kalshi.com/api-reference/portfolio/get-order.md):  Endpoint for getting a single order.
- [Get Order Group](https://docs.kalshi.com/api-reference/portfolio/get-order-group.md):  Retrieves details for a single order group including all order IDs and auto-cancel status.
- [Get Order Groups](https://docs.kalshi.com/api-reference/portfolio/get-order-groups.md):  Retrieves all order groups for the authenticated user.
- [Get Orders](https://docs.kalshi.com/api-reference/portfolio/get-orders.md):  Endpoint for getting all orders for the member.
- [Get Portfolio Resting Order Total Value](https://docs.kalshi.com/api-reference/portfolio/get-portfolio-resting-order-total-value.md):  Endpoint for getting the total value, in cents, of resting orders. This endpoint is only intended for use by FCM members (rare). Note: If you're uncertain about this endpoint, it likely does not apply to you.
- [Get Positions](https://docs.kalshi.com/api-reference/portfolio/get-positions.md):  Endpoint for getting all market positions for the member.
- [Get Queue Position for Order](https://docs.kalshi.com/api-reference/portfolio/get-queue-position-for-order.md):  Endpoint for getting an order's queue position in the order book. This represents the amount of orders that need to be matched before this order receives a partial or full match. Queue position is determined using a price-time priority.
- [Get Queue Positions for Orders](https://docs.kalshi.com/api-reference/portfolio/get-queue-positions-for-orders.md):  Endpoint for getting queue positions for all resting orders. Queue position represents the number of contracts that need to be matched before an order receives a partial or full match, determined using price-time priority.
- [Get Settlements](https://docs.kalshi.com/api-reference/portfolio/get-settlements.md):  Endpoint for getting the member's settlements historical track.
- [Reset Order Group](https://docs.kalshi.com/api-reference/portfolio/reset-order-group.md):  Resets the order group's matched contracts counter to zero, allowing new orders to be placed again after the limit was hit.
- [Get Structured Target](https://docs.kalshi.com/api-reference/structured_target/get-structured-target.md):  Endpoint for getting data about a specific structured target by its ID.
- [Get Structured Targets](https://docs.kalshi.com/api-reference/structured_target/get-structured-targets.md):  Endpoint for getting data about structured targets.
- [Market & Event Lifecycle](https://docs.kalshi.com/api-reference/websockets/market-&-event-lifecycle.md): Market state changes and event creation notifications.

**Requirements:**
- Market specification optional (omit to receive all events)
- Event creation notifications

**Use case:** Tracking market lifecycle including creation, de(activation), close date changes, determination, settlement

- [Market Positions](https://docs.kalshi.com/api-reference/websockets/market-positions.md): Real-time updates of your positions in markets. Requires authentication.

**Requirements:**
- Authentication required
- Market specification optional (omit to receive all positions)
- Updates sent when your position changes due to trades, settlements, etc.

**Monetary Values:**
All monetary values (position_cost, realized_pnl, fees_paid) are returned in centi-cents (1/10,000th of a dollar). 
To convert to dollars, divide by 10,000.

**Use case:** Portfolio tracking, position monitoring, P&L calculations

- [Market Ticker](https://docs.kalshi.com/api-reference/websockets/market-ticker.md): Market price, volume, and open interest updates.

**Requirements:**
- Market specification optional (omit to receive all markets)
- Updates sent whenever any ticker field changes

**Use case:** Displaying current market prices and statistics

- [Multivariate Lookups](https://docs.kalshi.com/api-reference/websockets/multivariate-lookups.md): Multivariate collection lookup notifications.

**Requirements:**
- Market specification optional

**Use case:** Tracking multivariate market relationships

- [Orderbook Updates](https://docs.kalshi.com/api-reference/websockets/orderbook-updates.md): Real-time orderbook price level changes. Provides incremental updates to maintain a live orderbook.

**Requirements:**
- Market specification required:
  - Use `market_ticker` (string) for a single market
  - Use `market_tickers` (array of strings) for multiple markets
- Sends `orderbook_snapshot` first, then incremental `orderbook_delta` updates

**Use case:** Building and maintaining a real-time orderbook

- [Public Trades](https://docs.kalshi.com/api-reference/websockets/public-trades.md): Public trade notifications when trades occur.

**Requirements:**
- Market specification optional (omit to receive all trades)
- Updates sent immediately after trade execution

**Use case:** Trade feed, volume analysis

- [User Fills](https://docs.kalshi.com/api-reference/websockets/user-fills.md): Your order fill notifications. Requires authentication.

**Requirements:**
- Authentication required
- Market specification ignored (always sends all your fills)
- Updates sent immediately when your orders are filled

**Use case:** Tracking your trading activity

- [WebSocket Connection](https://docs.kalshi.com/api-reference/websockets/websocket-connection.md): Main WebSocket connection endpoint. All communication happens through this single connection.
Use the subscribe command to subscribe to specific data channels. For more information, see the [Getting Started](https://docs.kalshi.com/getting_started/websocket_connection) guide.

- [API Changelog](https://docs.kalshi.com/changelog/index.md): Stay updated with API changes and version history
- [Connectivity](https://docs.kalshi.com/fix/connectivity.md): Connection setup and endpoints for Kalshi FIX API
- [Drop Copy Session](https://docs.kalshi.com/fix/drop-copy.md): Recover missed execution reports and query historical order events
- [Error Handling](https://docs.kalshi.com/fix/error-handling.md): Understanding and handling errors in the FIX protocol
- [FIX API Overview](https://docs.kalshi.com/fix/index.md): Financial Information eXchange (FIX) protocol implementation for Kalshi
- [Market Settlement](https://docs.kalshi.com/fix/market-settlement.md): Settlement reports for market outcomes and position resolution
- [Order Entry Messages](https://docs.kalshi.com/fix/order-entry.md): Submit, modify, and cancel orders through FIX messages
- [Order Group Messages](https://docs.kalshi.com/fix/order-groups.md): Manage order groups for automatic position management
- [RFQ Messages](https://docs.kalshi.com/fix/rfq-messages.md): Request for Quote functionality for market makers
- [Session Management](https://docs.kalshi.com/fix/session-management.md): Managing FIX sessions including logon, logout, and message sequencing
- [API Keys](https://docs.kalshi.com/getting_started/api_keys.md): API Key usage
- [Test In The Demo Environment](https://docs.kalshi.com/getting_started/demo_env.md): Set up and test with Kalshi's demo environment
- [Making Your First Request](https://docs.kalshi.com/getting_started/making_your_first_request.md): Start trading with Kalshi API in under 5 minutes
- [Orderbook Responses](https://docs.kalshi.com/getting_started/orderbook_responses.md): Understanding Kalshi orderbook structure and binary prediction market mechanics
- [Understanding Pagination](https://docs.kalshi.com/getting_started/pagination.md): Learn how to navigate through large datasets using cursor-based pagination
- [Quick Start: Authenticated Requests](https://docs.kalshi.com/getting_started/quick_start_authenticated_requests.md): Three simple steps to make your first authenticated API request to Kalshi
- [Quick Start: Create your first order](https://docs.kalshi.com/getting_started/quick_start_create_order.md): Learn how to find markets, place orders, check status, and cancel orders on Kalshi
- [Quick Start: Market Data](https://docs.kalshi.com/getting_started/quick_start_market_data.md): Learn how to access real-time market data without authentication
- [Quick Start: WebSockets](https://docs.kalshi.com/getting_started/quick_start_websockets.md): Learn how to establish and maintain a WebSocket connection to stream real-time market data
- [Rate Limits and Tiers](https://docs.kalshi.com/getting_started/rate_limits.md): Understanding API rate limits and access tiers
- [Subpenny Pricing](https://docs.kalshi.com/getting_started/subpenny_pricing.md): Understanding Kalshi subpenny pricing.
- [Kalshi Glossary](https://docs.kalshi.com/getting_started/terms.md): Core terminology used in the Kalshi exchange
- [Introduction](https://docs.kalshi.com/welcome/index.md): Welcome to the Kalshi API documentation